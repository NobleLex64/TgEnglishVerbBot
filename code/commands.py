from telegram.ext   import ContextTypes
from telegram       import Update, InlineKeyboardButton, InlineKeyboardMarkup

from help_functions  import *
from globals         import DB_PATH, IMAGE_PATH, ADMIN_ID, CHANNEL_USERNAMES, VERBS_INDEXES, VERBS_COUNT, VERBS_ON_PAGE
from loger           import create_log
from session_manager import *
from channel_signed  import *
from db_updater      import add_user_in_db

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user_id  = update.effective_user.id
  await delete_message(user_id, update.effective_chat.id, context)

  text = "–≠—Ç–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

  keyboard = [
    [InlineKeyboardButton("üìà‚ùì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="stud_progress")],  
    [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")]
  ]  

  try:
    message = await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    await add_message_id(user_id, message.id) 
  except Exception as e:
    await create_log(user_id, f"–û—à–∏–±–∫–µ –≤ admin: {e}")

# Command: /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user_id  = update.effective_user.id
  username = update.effective_user.name

  await delete_message(user_id, update.effective_chat.id, context)
  await add_user_in_db(user_id, username)

  if VERBS_INDEXES.get(user_id): 
    del VERBS_INDEXES[user_id]

  if CHANNEL_USERNAMES and CHANNEL_USERNAMES != [""] and not await is_signed(update, context):
    await not_signed(update, context)
    return

  text     = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤."
  keyboard = [
      [InlineKeyboardButton("‚ùì  –ü–æ–º–æ—â—å",  callback_data="help_command")],
      [InlineKeyboardButton("üìî  –£—á–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã", callback_data="irregular_verbs")],
      [InlineKeyboardButton("üî£  –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤", callback_data="table")],
      [InlineKeyboardButton("üìà  –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
  ]  

  if ADMIN_ID and user_id == int(ADMIN_ID):
    keyboard.append([InlineKeyboardButton("–ú–µ–Ω—é –ê–î–ú–ò–ù–ê", callback_data="admin")])  

  try:
    if update.message:
      await context.bot.delete_message(update.effective_chat.id, update.effective_message.id)
      message = await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
      message = await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    await add_message_id(user_id, message.id) 
  except Exception as e: 
    await create_log(user_id, f"–û—à–∏–±–∫–∞ –≤ start: {e}")

# Button: /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user_id = update.effective_user.id
  await delete_message(user_id, update.effective_chat.id, context)

  text = '''–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å.. 

            'üìî –£—á–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã'
                - 7 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≥–ª–∞–≥–æ–ª–∞–º–∏
                - —Ç–µ—Å—Ç –ø–æ —ç—Ç–∏–º –≥–ª–∞–≥–æ–ª–∞–º –ø–æ—Å–ª–µ –∏—Ö –∏–∑—É—á–µ–Ω–∏—è
                - –æ—Ü–µ–Ω–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    
            'üî£ –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤'
                - –¢–∞–±–ª–∏—Ü–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≥–ª–∞–≥–æ–ª–∞–º–∏ 
                - –ø–æ 15 —à—Ç—É–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                - 11 —Å—Ç—Ä–∞–Ω–∏—Ü —Å 159 –≥–ª–∞–≥–æ–ª–∞–º–∏
    
            'üìà  –ü—Ä–æ–≥—Ä–µ—Å—Å'
                - —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∂–µ—Ç –∫–∞–∫ –º–Ω–æ–≥–æ –≥–ª–∞–≥–æ–ª–æ–≤ —Ç—ã —É—Å–ø–µ–ª –∏–∑—É—á–∏—Ç—å –∏ —Å–∫–æ–ª—å–∫–æ –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã—É—á–∏—Ç—å.
                - —Ç–∞–∫–∂–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    
            p.s. –¢–∞–∫–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É.
                –ü–∏—à–∏ –≤ —á–∞—Ç –≥–ª–∞–≥–æ–ª –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å, –∏ –ø–æ–ª—É—á–∏—à—å –∫–∞—Ä—Ç–æ—á–∫—É —Å –Ω–∏–º)    
        '''

  keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")]]
  try:
    message = await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    await add_message_id(user_id, message.id) 
  except Exception as e:
    await create_log(user_id, f"–û—à–∏–±–∫–µ –≤ help: {e}")

# Button: /irregular_verb
async def irregular_verb(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user_id  = update.effective_user.id
  await delete_message(user_id, update.effective_chat.id, context)

  try:
    async with aiosqlite.connect(DB_PATH) as conn:
      cursor   = await conn.execute("SELECT progress FROM users WHERE id = ?", (user_id,))
      row      = await cursor.fetchone()
      progress = bytearray(row[0])

      verbs = find_next_unlearned(progress, 7)
      VERBS_INDEXES[user_id] = { "verbs": verbs, "index": 0, "progress": bytearray(1)}

      if len(VERBS_INDEXES[user_id]) == 0:
        text = "–í—ã —É–∂–µ –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã!"
        keyboard = [ [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")] ]
        message = await update.callback_query.message.reply_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))
        await add_message_id(user_id, message.id)
        return
    
    text = "–í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –≥–ª–∞–≥–æ–ª–æ–≤?"
    keyboard = [
      [InlineKeyboardButton("üé´ –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", callback_data="ok")],
      [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")]
    ]
    message = await update.callback_query.message.reply_text(
      text=text,
      reply_markup=InlineKeyboardMarkup(keyboard))
    await add_message_id(user_id, message.id)
  except Exception as e:
    await create_log(user_id, f"–û—à–∏–±–∫–µ –≤ irregular_verb: {e}")

# Button: /irregular_verb_table
async def irregular_verb_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user_id  = update.effective_user.id
  await delete_message(user_id, update.effective_chat.id, context)

  pages_count = (VERBS_COUNT // VERBS_ON_PAGE) + 1
  pages = []
  for i in range(0, pages_count):
    n = i + 1
    pages.append(f"table_{n}")
  VERBS_INDEXES[user_id] = { "verbs": pages, "index": 0, "progress": None }
  
  text = "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤?"
  keyboard = [
    [InlineKeyboardButton("üé´ –ü–æ–ª—É—á–∏—Ç—å", callback_data="ok")],
    [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")]
  ]
  try:
    message = await update.callback_query.message.reply_text(
      text=text,
      reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await add_message_id(user_id, message.id)
  except Exception as e:
    await create_log(user_id, f"–û—à–∏–±–∫–µ –≤ irregular_verb_table: {e}")

# Button: /progress
async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user_id = update.effective_user.id
  await delete_message(user_id, update.effective_chat.id, context)

  count = 0
  try:
    async with aiosqlite.connect(DB_PATH) as conn:
      cursor   = await conn.execute("SELECT progress FROM users WHERE id = ?", (user_id,))
      row      = await cursor.fetchone()
      progress = bytearray(row[0])

      for i in range(0, len(progress) * 8):
        if is_bit_set(progress, i):
          count += 1

    text = "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: " + f"{count}/{len(progress) * 8}"
    keyboard = [
      [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")],
      [InlineKeyboardButton("‚ùå Delete progress?", callback_data="ask_delete_progress")]
    ]
    message = await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    await add_message_id(user_id, message.id)
  except Exception as e:
    await create_log(user_id, f"–û—à–∏–±–∫–µ –≤ progress: {e}")

# Help: /progress/ask_delete_progress
async def ask_del_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user_id = update.effective_user.id
  await delete_message(user_id, update.effective_chat.id, context)

  text = "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Å—å –≤–µ—Å—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å?"
  keyboard = [
    [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="progress")],
    [InlineKeyboardButton("‚ùå Delete", callback_data="delete_progress")]
  ]
  try:
    message = await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    await add_message_id(user_id, message.id) 
  except Exception as e:
    await create_log(user_id, f"–û—à–∏–±–∫–µ –≤ ask_del_progress: {e}")


# Help: /progress/ask_delete_progress/delete
async def del_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user_id = update.effective_user.id
  await delete_message(user_id, update.effective_chat.id, context)
  
  try:
    async with aiosqlite.connect(DB_PATH) as conn:
      await conn.execute("UPDATE users SET progress = ? WHERE id = ?", (bytearray(VERBS_COUNT // 8), user_id))
      await conn.commit()

    text = "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –±—ã–ª —É–¥–∞–ª–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."
    keyboard = [
      [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="progress")],
      [InlineKeyboardButton("‚¨ÖÔ∏è‚¨ÖÔ∏è Menu", callback_data="start")]
    ]

    message = await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    await add_message_id(user_id, message.id)
  except Exception as e:
    await create_log(user_id, f"–û—à–∏–±–∫–µ –≤ del_progress: {e}")

async def check_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user_id  = update.effective_user.id
  await delete_message(user_id, update.effective_chat.id, context)

  result = {}
  try:
    async with aiosqlite.connect(DB_PATH) as conn:
      cursor   = await conn.execute("SELECT username, progress, data_last_update FROM users")
      rows     = await cursor.fetchall()

      for name, progress, data in rows:
        count = sum(1 for i in range(len(progress) * 8) if is_bit_set(progress, i))
        result[name] = {"count": count, "data": data}

    text = ''
    keyboard = [
      [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="admin")]
    ]  

    for name, cd in result.items():
      text += f"'{name}':\n    –í—ã—É—á–µ–Ω–Ω–æ –≥–ª–∞–≥–æ–ª–æ–≤: '{cd["count"]}'\n    –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞: '{cd["data"]}'\n\n"

    message = await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    await add_message_id(user_id, message.id)
  except Exception as e:
    await create_log(user_id, f"–û—à–∏–±–∫–µ –≤ check_progress: {e}")

# Echo handler, send ans. on your req.
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user_id = update.effective_user.id
  await delete_message(user_id, update.effective_chat.id, context) # no except function
  await context.bot.delete_message(update.effective_chat.id, update.message.id) # no except, because it only works on message

  if update.message.text.startswith("/"):
    return

  if VERBS_INDEXES.get(user_id): 
    del VERBS_INDEXES[user_id]

  functions = [ search_present_simple, search_past_simple, search_past_participle ]
  verb      = update.message.text.lower() # no except

  for function in functions:
    verb_id = await function(verb, DB_PATH)
    if verb_id:
      image_path = IMAGE_PATH + str(verb_id) + '.png'
      try:
        img      = get_image(image_path)
        keyboard = [ [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")] ]
        message  = await update.message.reply_photo(img, reply_markup=InlineKeyboardMarkup(keyboard))
        await add_message_id(user_id, message.id)
        return
      except Exception as e:
        await create_log(user_id, f"–û—à–∏–±–∫–∞ –≤ echo: {e}")
        return